// <auto-generated />
using System;
using Intersect.Server.Database.PlayerData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intersect.Server.Migrations.MySql.Player
{
    [DbContext(typeof(MySqlPlayerContext))]
    [Migration("20250819001000_PlayerSpells")]
    partial class PlayerSpells
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Intersect.Server.Database.PlayerData.Players.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .UseCollation("ascii_general_ci");

                    b.Property<int>("AvailableSpellPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Intersect.Server.Database.PlayerData.Players.PlayerSpell", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .HasColumnType("char(36)")
                        .UseCollation("ascii_general_ci");

                    b.Property<Guid>("SpellId")
                        .HasColumnType("char(36)")
                        .UseCollation("ascii_general_ci");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<long>("LastUsedAtMs")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerId", "SpellId");

                    b.HasIndex("PlayerId", "SpellId")
                        .IsUnique();

                    b.ToTable("PlayerSpells");
                });
#pragma warning restore 612, 618
        }
    }
}
